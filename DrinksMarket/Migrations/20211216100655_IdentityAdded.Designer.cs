// <auto-generated />
using System;
using DrinksMarket.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DrinksMarket.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20211216100655_IdentityAdded")]
    partial class IdentityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrinksMarket.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Cofee Drinks"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Tea Drinks"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Homemade Lemonades"
                        });
                });

            modelBuilder.Entity("DrinksMarket.Models.Drink", b =>
                {
                    b.Property<int>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDrinkOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrinkId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Drinks");

                    b.HasData(
                        new
                        {
                            DrinkId = 1,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/RFMt8S0D/espresso.png",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "We can serve it with one or two shots of espresso. You can drink it here at our comfortable place or take it to go!",
                            Name = "Espresso",
                            Price = 2.5m,
                            ShortDescription = "Locally-roasted organic blend"
                        },
                        new
                        {
                            DrinkId = 2,
                            CategoryId = 2,
                            ImageUrl = "https://i.postimg.cc/BnrchfDr/black-tea.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "We can serve it with one or two shots of espresso. You can drink it here at our comfortable place or take it to go!",
                            Name = "Black Tea",
                            Price = 25m,
                            ShortDescription = "Stronger in flavor with less caffeine than coffee."
                        },
                        new
                        {
                            DrinkId = 3,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/LXRkpkxv/cappuccino.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Dark, rich espresso lies in wait under a smoothed and stretched layer of thick milk foam. An alchemy of barista artistry and craft.",
                            Name = "Cappuccino",
                            Price = 4.5m,
                            ShortDescription = "Barista's favorite drink!"
                        },
                        new
                        {
                            DrinkId = 4,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/d1B2t7XF/coffee-milk.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "Espresso meets a dollop of whipped cream to enhance the rich and caramelly flavors of a straight-up shot.",
                            Name = "Coffee with Milk",
                            Price = 3m,
                            ShortDescription = "Locally-roasted organic blend with a splash of milk."
                        },
                        new
                        {
                            DrinkId = 5,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/05VYTwDd/cold-brew.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "Handcrafted in small batches daily, slow-steeped in cool water for 20 hours, without touching heat Cold Brew is made from our custom blend of beans grown to steep long and cold for a super-smooth flavor.",
                            Name = "Cold Brew",
                            Price = 5.5m,
                            ShortDescription = "Smooth and deliciously drinkable!"
                        },
                        new
                        {
                            DrinkId = 6,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/vT25fJbS/cold-matcha.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Smooth and creamy matcha sweetened just right and served with milk over ice. Green has never tasted so good.",
                            Name = "Iced Matcha",
                            Price = 6m,
                            ShortDescription = "Unique and tasty drink."
                        },
                        new
                        {
                            DrinkId = 7,
                            CategoryId = 2,
                            ImageUrl = "https://i.postimg.cc/13hbq2Xz/fruit-tea.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "This boldly flavored tea is made with a combination of our flavored fruit juices blend and the best fruit tea blends.",
                            Name = "Fruit Tea",
                            Price = 3.5m,
                            ShortDescription = "We offer many kinds and flavours."
                        },
                        new
                        {
                            DrinkId = 8,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/WbKM3c9d/iced-coffee.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Freshly brewed Local Iced Coffee Blend with milk served chilled and sweetened over ice. An absolutely, seriously, refreshingly lift to any day.",
                            Name = "Iced Coffee",
                            Price = 3.55m,
                            ShortDescription = "Cold version of regular coffee."
                        },
                        new
                        {
                            DrinkId = 9,
                            CategoryId = 2,
                            ImageUrl = "https://i.postimg.cc/1zyTWFph/iced-green-tea.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Premium green tea is shaken with ice. It's the ideal iced tea—a rich and flavorful green tea journey awaits you.",
                            Name = "Iced Green Tea",
                            Price = 4m,
                            ShortDescription = "Refreshing and revitalizing bevarage."
                        },
                        new
                        {
                            DrinkId = 10,
                            CategoryId = 2,
                            ImageUrl = "https://i.postimg.cc/R0xK7Qx9/iced-tea.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "A blend of hibiscus, lemongrass and apple, handshaken with ice. A refreshingly vibrant tea infused with the color of passion.",
                            Name = "Iced Tea",
                            Price = 3.5m,
                            ShortDescription = "Refreshing caffeine-free drink idea."
                        },
                        new
                        {
                            DrinkId = 11,
                            CategoryId = 1,
                            ImageUrl = "https://i.postimg.cc/0yw7KX3c/latte.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "Our dark, rich espresso balanced with steamed milk and a light layer of foam. A perfect milk-forward warm-up.",
                            Name = "Latte",
                            Price = 4.5m,
                            ShortDescription = "One-third espresso, two-thirds heated milk and a little foam."
                        },
                        new
                        {
                            DrinkId = 12,
                            CategoryId = 3,
                            ImageUrl = "https://i.postimg.cc/bwxWHgS9/lavender.jpg",
                            IsDrinkOfTheWeek = false,
                            LongDescription = "This lemonade perfumes floral flavors that are sweet, yet refreshingly succulent. It is perfect for summer parties, brunch or an afternoon at the park.",
                            Name = "Lavender Lemonade",
                            Price = 5m,
                            ShortDescription = "The most refreshing lavender lemonade for summer!"
                        },
                        new
                        {
                            DrinkId = 13,
                            CategoryId = 3,
                            ImageUrl = "https://i.postimg.cc/MGtLgGDc/lemonade.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Lightly flavored and oh-so-refreshing! Our classic lemonade recipe is the best! And trust us when we say that this is one of our best-sellers! ",
                            Name = "Old-Fashioned Lemonade",
                            Price = 3.5m,
                            ShortDescription = "Sweet and simple classic lemonade."
                        },
                        new
                        {
                            DrinkId = 14,
                            CategoryId = 3,
                            ImageUrl = "https://i.postimg.cc/ZRRQmh7w/raspberry1.jpg",
                            IsDrinkOfTheWeek = true,
                            LongDescription = "Ask for a refreshing glass of Raspberry Lemonade and you won't regret it! It's both sweet and tangy and sure to be delicious.",
                            Name = "Raspberry Lemonade",
                            Price = 4.5m,
                            ShortDescription = "Taste tart raspberry sweetness coupled with minty coolness."
                        });
                });

            modelBuilder.Entity("DrinksMarket.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DrinksMarket.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("DrinkId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("DrinksMarket.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("DrinkId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("DrinkId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DrinksMarket.Models.Drink", b =>
                {
                    b.HasOne("DrinksMarket.Models.Category", "Category")
                        .WithMany("Drinks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrinksMarket.Models.OrderDetail", b =>
                {
                    b.HasOne("DrinksMarket.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrinksMarket.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrinksMarket.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("DrinksMarket.Models.Drink", "Drink")
                        .WithMany()
                        .HasForeignKey("DrinkId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
